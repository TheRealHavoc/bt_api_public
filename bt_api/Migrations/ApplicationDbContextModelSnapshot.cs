// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bt_api.DataAccessLayer;

#nullable disable

namespace bt_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("bt_api.Models.ActionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TurnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TurnId");

                    b.ToTable("ActionDbSet");
                });

            modelBuilder.Entity("bt_api.Models.AttackModel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AttackAttr")
                        .HasColumnType("int");

                    b.Property<int>("DamageAttr")
                        .HasColumnType("int");

                    b.Property<int>("DamageDie")
                        .HasColumnType("int");

                    b.Property<int>("DamageDieAmount")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("AttackDbSet");

                    b.HasData(
                        new
                        {
                            Name = "Longsword",
                            AttackAttr = 0,
                            DamageAttr = 0,
                            DamageDie = 8,
                            DamageDieAmount = 1
                        },
                        new
                        {
                            Name = "Axe",
                            AttackAttr = 1,
                            DamageAttr = 1,
                            DamageDie = 6,
                            DamageDieAmount = 2
                        },
                        new
                        {
                            Name = "Rapier",
                            AttackAttr = 1,
                            DamageAttr = 1,
                            DamageDie = 8,
                            DamageDieAmount = 1
                        },
                        new
                        {
                            Name = "Shortbow",
                            AttackAttr = 1,
                            DamageAttr = 1,
                            DamageDie = 6,
                            DamageDieAmount = 1
                        });
                });

            modelBuilder.Entity("bt_api.Models.BugReportModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BugReportDbSet");
                });

            modelBuilder.Entity("bt_api.Models.CharacterModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<string>("AvatarURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConstitutionScore")
                        .HasColumnType("int");

                    b.Property<int>("DexterityScore")
                        .HasColumnType("int");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProficiencyBonus")
                        .HasColumnType("int");

                    b.Property<int>("StrengthScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CharacterDbSet");

                    b.HasData(
                        new
                        {
                            Id = "CHAR01",
                            ArmorClass = 13,
                            AvatarURL = "https://www.gmbinder.com/images/RL0wHsa.jpg",
                            ConstitutionScore = 12,
                            DexterityScore = 14,
                            MaxHitPoints = 26,
                            Name = "Tara Qim",
                            ProficiencyBonus = 2,
                            StrengthScore = 14
                        },
                        new
                        {
                            Id = "CHAR02",
                            ArmorClass = 10,
                            AvatarURL = "https://cdnb.artstation.com/p/assets/images/images/053/718/019/large/matthaeus-milletti-kpeaze-orc-wearing-armor-style-of-dnd-character-concept-intrica-01bacfe9-4187-4495-bab0-a02498c30221.jpg?1663521038",
                            ConstitutionScore = 15,
                            DexterityScore = 8,
                            MaxHitPoints = 32,
                            Name = "Marduk the Cruel",
                            ProficiencyBonus = 2,
                            StrengthScore = 16
                        },
                        new
                        {
                            Id = "CHAR03",
                            ArmorClass = 15,
                            AvatarURL = "https://i.pinimg.com/736x/1b/6c/e9/1b6ce97153d3f7bbed330e3f7dc02293.jpg",
                            ConstitutionScore = 12,
                            DexterityScore = 16,
                            MaxHitPoints = 26,
                            Name = "Stella",
                            ProficiencyBonus = 2,
                            StrengthScore = 12
                        });
                });

            modelBuilder.Entity("bt_api.Models.MatchModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MatchDbSet");
                });

            modelBuilder.Entity("bt_api.Models.PlayerDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CurrentHitPoints")
                        .HasColumnType("int");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReady")
                        .HasColumnType("bit");

                    b.Property<string>("MatchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("MatchId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerDataDbSet");
                });

            modelBuilder.Entity("bt_api.Models.TurnModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MatchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("MatchId");

                    b.ToTable("TurnDbSet");
                });

            modelBuilder.Entity("bt_api.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RefreshTokenExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserDbSet");
                });

            modelBuilder.Entity("CharacterAttack", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttackName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CharacterId", "AttackName");

                    b.HasIndex("AttackName");

                    b.ToTable("CharacterAttack");

                    b.HasData(
                        new
                        {
                            CharacterId = "CHAR01",
                            AttackName = "Longsword"
                        },
                        new
                        {
                            CharacterId = "CHAR02",
                            AttackName = "Axe"
                        },
                        new
                        {
                            CharacterId = "CHAR03",
                            AttackName = "Rapier"
                        },
                        new
                        {
                            CharacterId = "CHAR03",
                            AttackName = "Shortbow"
                        });
                });

            modelBuilder.Entity("bt_api.Models.ActionModel", b =>
                {
                    b.HasOne("bt_api.Models.TurnModel", "Turn")
                        .WithMany("Actions")
                        .HasForeignKey("TurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("bt_api.Models.BugReportModel", b =>
                {
                    b.HasOne("bt_api.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("bt_api.Models.PlayerDataModel", b =>
                {
                    b.HasOne("bt_api.Models.CharacterModel", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId");

                    b.HasOne("bt_api.Models.MatchModel", "Match")
                        .WithMany("PlayerData")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bt_api.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("bt_api.Models.TurnModel", b =>
                {
                    b.HasOne("bt_api.Models.CharacterModel", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bt_api.Models.MatchModel", "Match")
                        .WithMany("Turns")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("CharacterAttack", b =>
                {
                    b.HasOne("bt_api.Models.AttackModel", null)
                        .WithMany()
                        .HasForeignKey("AttackName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bt_api.Models.CharacterModel", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bt_api.Models.MatchModel", b =>
                {
                    b.Navigation("PlayerData");

                    b.Navigation("Turns");
                });

            modelBuilder.Entity("bt_api.Models.TurnModel", b =>
                {
                    b.Navigation("Actions");
                });
#pragma warning restore 612, 618
        }
    }
}
